"""
DOCX Generator utility for MIMÉTICA reports.

This module provides functionality to convert markdown-like content to DOCX format
using python-docx, with basic support for headers and embedding images referenced
via ImageManager placeholders or short IDs in markdown image syntax.
"""

from io import BytesIO
from datetime import datetime
from typing import Dict, Any, List, Optional
import re

from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH


class DocxGenerator:
    """DOCX Generator for MIMÉTICA reports using python-docx"""

    def __init__(self):
        pass

    def _normalize_placeholders(self, content: str) -> str:
        """Convert markdown image short-ids to explicit placeholders.

        Example: ![Title](abcdef12) -> [IMAGE_PLACEHOLDER: abcdef12]\n...[/IMAGE_PLACEHOLDER]
        """
        def repl(match: re.Match) -> str:
            img_id = match.group(1)
            title = match.group(0)
            return f"\n[IMAGE_PLACEHOLDER: {img_id}]\n{title}\n[/IMAGE_PLACEHOLDER]\n"

        pattern = r"!\[[^\]]*\]\(([a-fA-F0-9\-]{6,})\)"
        return re.sub(pattern, repl, content)

    def _extract_placeholder_ids(self, content: str) -> List[str]:
        pattern = r"\[IMAGE_PLACEHOLDER: ([a-fA-F0-9\-]{6,})\]"
        return re.findall(pattern, content)

    def _add_visualizations_section(self, doc: Document, image_ids: List[str]):
        if not image_ids:
            return
        from utils.image_manager import image_manager

        doc.add_heading('Visualizations', level=2)
        for idx, image_id in enumerate(image_ids, start=1):
            meta = image_manager.get_image_by_id(image_id)
            if not meta:
                continue
            try:
                # python-docx supports a file-like object
                with open(meta['filepath'], 'rb') as f:
                    doc.add_picture(f, width=Inches(6))
                last_par = doc.paragraphs[-1]
                last_par.alignment = WD_ALIGN_PARAGRAPH.CENTER
                caption = doc.add_paragraph(f"Figure {idx}: {meta.get('title', meta.get('chart_type', 'Visualization'))}")
                caption.alignment = WD_ALIGN_PARAGRAPH.CENTER
            except Exception:
                # Skip any image that can't be loaded
                continue

    def markdown_to_docx(self, markdown_content: str, title: str = "MIMÉTICA Report") -> bytes:
        """
        Convert simple markdown content to DOCX with images.
        - Supports #, ##, ### headings, paragraphs, and image placeholders.
        - Tables and complex markdown are inserted as plain text.
        """
        from utils.image_manager import image_manager

        # Normalize inline short-id images to placeholders
        markdown_content = self._normalize_placeholders(markdown_content)

        doc = Document()

        # Title
        doc.add_heading(title, level=1)
        meta_par = doc.add_paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        # If there are no explicit placeholders in content but images exist in session, show them upfront
        placeholder_ids = self._extract_placeholder_ids(markdown_content)
        if not placeholder_ids:
            placeholder_ids = [img['id'] for img in image_manager.get_all_images()]
        self._add_visualizations_section(doc, placeholder_ids)

        # Basic markdown parsing
        lines = markdown_content.split('\n')
        for line in lines:
            s = line.strip()
            if not s:
                doc.add_paragraph("")
                continue

            # Skip placeholder blocks content itself
            if s.startswith('[IMAGE_PLACEHOLDER:') or s.startswith('[/IMAGE_PLACEHOLDER]'):
                continue

            # Headings
            if s.startswith('### '):
                doc.add_heading(s[4:].strip(), level=3)
            elif s.startswith('## '):
                doc.add_heading(s[3:].strip(), level=2)
            elif s.startswith('# '):
                # Avoid duplicating main title; include as level 2
                doc.add_heading(s[2:].strip(), level=2)
            else:
                # Tables or code blocks: just add as plain paragraph
                doc.add_paragraph(s)

        # Footer
        doc.add_paragraph()
        doc.add_paragraph("Generated by MIMÉTICA MVP 1.0 - Strategic Decision Support System")

        # Save to bytes
        bio = BytesIO()
        doc.save(bio)
        bio.seek(0)
        return bio.getvalue()

    def generate_comprehensive_report_docx(self, phase_outputs: Dict[str, Any]) -> bytes:
        """Generate a comprehensive DOCX report from phase outputs, embedding images."""
        # Try to extract report markdown content similar to PDFGenerator
        markdown_content = ""

        if 'report' in phase_outputs:
            report_output = phase_outputs['report'].get('output', {})
            if isinstance(report_output, str):
                markdown_content = report_output
            elif isinstance(report_output, dict):
                if 'output' in report_output:
                    markdown_content = report_output['output']
                else:
                    report_str = str(report_output)
                    start_marker = "# MIMÉTICA Strategic Decision Support System"
                    if start_marker in report_str:
                        start_idx = report_str.find(start_marker)
                        end_idx = len(report_str)
                        for marker in ["', 'includes_phases'", "\"', 'includes_phases'\"", "\\n---\\n\\nThis report contains"]:
                            marker_idx = report_str.find(marker, start_idx)
                            if marker_idx != -1:
                                end_idx = min(end_idx, marker_idx)
                        markdown_content = report_str[start_idx:end_idx]
                        markdown_content = markdown_content.replace('\\n', '\n').replace('\\t', '\t').replace('\\"', '"').replace("\\'", "'")

        # Fallback: synthesize a basic markdown from phases
        if not markdown_content or len(markdown_content.strip()) < 50:
            pieces: List[str] = [
                "# MIMÉTICA Strategic Decision Support System",
                "## Comprehensive Analysis Report",
                f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                "",
            ]
            for phase, info in phase_outputs.items():
                pieces.append(f"## {phase.replace('_', ' ').title()}")
                content = info.get('output', {})
                if isinstance(content, dict):
                    for k, v in content.items():
                        pieces.append(f"### {k}\n{str(v)}")
                else:
                    pieces.append(str(content))
                pieces.append("")
            markdown_content = '\n'.join(pieces)

        return self.markdown_to_docx(markdown_content, title="MIMÉTICA Comprehensive Report")


# Global instance
docx_generator = DocxGenerator()
